import * as PIXI from 'pixi.js';

var ClickEvent = function (obj: any, includeHover: boolean, rightMouseButton: boolean, doubleClick: boolean)
{
   var bound = false,
       self = this,
       id = 0,
       ishover = false,
       mouse = new PIXI.Point(),
       offset = new PIXI.Point(),
       movementX = 0,
       movementY = 0,
       right = typeof rightMouseButton === 'undefined' ? false : rightMouseButton,
       hover = typeof includeHover === 'undefined' ? true : includeHover,
       double = typeof doubleClick === 'undefined' ? false : doubleClick;


   var eventname_mousedown = right ? "rightdown" : "mousedown";
   var eventname_mouseup = right ? "rightup" : "mouseup";
   var eventname_mouseupoutside = right ? "rightupoutside" : "mouseupoutside";

   obj.container.interactive = true;

   var time = 0;

   var _onMouseDown = function (event: PIXI.interaction.InteractionEvent)
   {
      mouse.copy(event.data.global);
      id = event.data.identifier;
      self.onPress.call(obj, event, true);
      if (!bound)
      {
         obj.container.on(eventname_mouseup, _onMouseUp);
         obj.container.on(eventname_mouseupoutside, _onMouseUpOutside);
         if (!right)
         {
            obj.container.on('touchend', _onMouseUp);
            obj.container.on('touchendoutside', _onMouseUpOutside);
         }
         bound = true;
      }

      if (double)
      {
         var now = performance.now();
         if (now - time < 210)
         {
            self.onClick.call(obj, event);
         } else
         {
            time = now;
         }
      }

      event.data.originalEvent.preventDefault();
   };

   var _mouseUpAll = function (event: PIXI.interaction.InteractionEvent)
   {
      if (event.data.identifier !== id)
         return;

      offset.set(event.data.global.x - mouse.x, event.data.global.y - mouse.y);
      if (bound)
      {
         obj.container.removeListener(eventname_mouseup, _onMouseUp);
         obj.container.removeListener(eventname_mouseupoutside, _onMouseUpOutside);
         if (!right)
         {
            obj.container.removeListener('touchend', _onMouseUp);
            obj.container.removeListener('touchendoutside', _onMouseUpOutside);
         }
         bound = false;
      }
      self.onPress.call(obj, event, false);
   };

   var _onMouseUp = function (event: PIXI.interaction.InteractionEvent)
   {
      if (event.data.identifier !== id)
         return;

      _mouseUpAll(event);

      //prevent clicks with scrolling/dragging objects
      if (obj.dragThreshold)
      {
         movementX = Math.abs(offset.x);
         movementY = Math.abs(offset.y);
         if (Math.max(movementX, movementY) > obj.dragThreshold) return;
      }

      if (!double)
         self.onClick.call(obj, event);
   };

   var _onMouseUpOutside = function (event: PIXI.interaction.InteractionEvent)
   {
      if (event.data.identifier !== id)
         return;

      _mouseUpAll(event);
   };

   var _onMouseOver = function (event: PIXI.interaction.InteractionEvent)
   {
      if (!ishover)
      {
         ishover = true;
         obj.container.on('mousemove', _onMouseMove);
         obj.container.on('touchmove', _onMouseMove);
         self.onHover.call(obj, event, true);
      }
   };

   var _onMouseOut = function (event: PIXI.interaction.InteractionEvent) {
      if (ishover)
      {
         ishover = false;
         obj.container.removeListener('mousemove', _onMouseMove);
         obj.container.removeListener('touchmove', _onMouseMove);
         self.onHover.call(obj, event, false);
      }
   };

   var _onMouseMove = function (event: PIXI.interaction.InteractionEvent)
   {
      self.onMove.call(obj, event);
   };

   this.stopEvent = function ()
   {
      if (bound)
      {
         obj.container.removeListener(eventname_mouseup, _onMouseUp);
         obj.container.removeListener(eventname_mouseupoutside, _onMouseUpOutside);

         if (!right)
         {
            obj.container.removeListener('touchend', _onMouseUp);
            obj.container.removeListener('touchendoutside', _onMouseUpOutside);
         }
         bound = false;
      }
      obj.container.removeListener(eventname_mousedown, _onMouseDown);
      if (!right)
         obj.container.removeListener('touchstart', _onMouseDown);

      if (hover)
      {
         obj.container.removeListener('mouseover', _onMouseOver);
         obj.container.removeListener('mouseout', _onMouseOut);
         obj.container.removeListener('mousemove', _onMouseMove);
         obj.container.removeListener('touchmove', _onMouseMove);
      }
   };

   this.startEvent = function ()
   {
      obj.container.on(eventname_mousedown, _onMouseDown);
      if (!right)
         obj.container.on('touchstart', _onMouseDown);

      if (hover)
      {
         obj.container.on('mouseover', _onMouseOver);
         obj.container.on('mouseout', _onMouseOut);

      }
   };

   this.startEvent();
};

ClickEvent.prototype.constructor = ClickEvent;
module.exports = ClickEvent;

ClickEvent.prototype.onHover = function (_event: PIXI.interaction.InteractionEvent, _over: boolean) { };
ClickEvent.prototype.onPress = function (_event: PIXI.interaction.InteractionEvent, _isPressed: boolean) { };
ClickEvent.prototype.onClick = function (_event: PIXI.interaction.InteractionEvent) { };
ClickEvent.prototype.onMove = function (_event: PIXI.interaction.InteractionEvent) { };
